@using OfficeOpenXml;
@using System.IO;
@using System.Collections.Generic;
@using OfficeOpenXml.Style;
@inject IJSRuntime JSRuntime

<MudButton OnClick="ExcelDownload"></MudButton>

@Code{

      private List<Model> collection = new List<Model>();
      collection = Iservice.GenerateTariffs(Id);
      
      public async Task ExcelDownload()
      {
          using (ExcelPackage excelPackage = new ExcelPackage())
          {
              // Add a worksheet
              ExcelWorksheet worksheet = excelPackage.Workbook.Worksheets.Add("Sheet1");
      
              // Add column headers
              worksheet.Cells[1, 1].Value = "BillNumber";
              worksheet.Cells[1, 2].Value = "BillDate";
              worksheet.Cells[1, 3].Value = "PassNumber";
              worksheet.Cells[1, 4].Value = "ConsigneeName";
              worksheet.Cells[1, 5].Value = "BillQuantity";
              worksheet.Cells[1, 6].Value = "Amount";
              for (int i = 1; i <= 6; i++)
              {
                  worksheet.Cells[1, i].Style.Font.Bold = true;
              }
      
              worksheet.Column(2).Style.Numberformat.Format = "dd-MM-yyyy"; // Date format
              worksheet.Column(5).Style.Numberformat.Format = "0.00"; // Integer format
              worksheet.Column(6).Style.Numberformat.Format = "0.00";
      
              // Add data rows
              int row = 2;
              foreach (var item in collection)
              {
                  worksheet.Cells[row, 1].Value = item.BillNumber;
                  worksheet.Cells[row, 2].Value = item.BillDate;
                  worksheet.Cells[row, 3].Value = item.PassNumber;
                  worksheet.Cells[row, 4].Value = item.ConsigneeName;
                  worksheet.Cells[row, 5].Value = item.BillQuantity;
                  worksheet.Cells[row, 6].Value = item.Amount;
      
                  row++;
              }
      
              worksheet.Cells[worksheet.Dimension.Address].Style.Border.Top.Style = ExcelBorderStyle.Thin;
              worksheet.Cells[worksheet.Dimension.Address].Style.Border.Left.Style = ExcelBorderStyle.Thin;
              worksheet.Cells[worksheet.Dimension.Address].Style.Border.Right.Style = ExcelBorderStyle.Thin;
              worksheet.Cells[worksheet.Dimension.Address].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
      
              string filePath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\Downloads";
              //string filePath = ((Environment.OSVersion.Platform == PlatformID.Unix || Environment.OSVersion.Platform == PlatformID.MacOSX) ? Environment.GetEnvironmentVariable("HOME") : Environment.ExpandEnvironmentVariables("%HOMEDRIVE%%HOMEPATH%")) + "\\Downloads";
              // Save the Excel package to a file
              // FileInfo excelFile = new FileInfo(@"C:\~\Downloads\Pending_Consignments.xlsx");
              // excelPackage.SaveAs(excelFile);
              string time = DateTime.Now.ToString("dd-MM-yyyy");
              string filename = $"Pending Consignments({time}).xlsx";
              string url = Path.Combine(filePath,filename);
      
              FileInfo excelFile = new FileInfo(url);
      
              var byteArray = excelPackage.GetAsByteArray();
              if (byteArray != null && byteArray.Length > 0)
              {
                  excelPackage.SaveAs(excelFile);
                  snackbar.Add("File Downloaded Successfully ", Severity.Success);
              }
              else
              {
                  snackbar.Add("File Downloaded error ! ", Severity.Error);
              }
          }
      }
}
